metadata:
  repository: autonomy/conform

policies:
  - type: conventionalCommit
    spec:
      types:
        - "chore"
        - "docs"
        - "perf"
        - "refactor"
        - "style"
        - "test"
      scopes:
        - "ci"
        - "docker"
        - "git"
        - "metadata"
        - "policy"
        - "renderer"
        - "*"

script:
  template: |
    #!/bin/bash

    set -e

    # Check if the branch is a master.
    if [[ "{{ .Git.Branch }}" != "master" ]]; then
      echo "Branch '{{ .Git.Branch }}' is not 'master'"
      exit 0
    fi

    # Check if working tree is clean.
    if [[ "{{ .Git.IsClean }}" != "true" ]]; then
      echo "The working tree is dirty."
      exit 1
    fi

    echo "Pushing image {{ .Docker.Image }}"
    docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"
    docker push {{ .Docker.Image }}

    # Check if ref is a tag.
    if [[ "{{ .Git.IsTag }}" != "true" ]]; then
      exit 0
    fi

    # Check if tag is a prerelease.
    if [[ "{{ .Version.IsPrerelease }}" == "true" ]]; then
      echo "Prerelease {{ .Version.Major }}.{{ .Version.Minor }}.{{ .Version.Patch }}-{{ .Version.Prerelease }}"
      docker tag {{ .Docker.Image }} {{ .Repository }}:{{ .Version.Major }}.{{ .Version.Minor }}.{{ .Version.Patch }}-{{ .Version.Prerelease }}
      docker push {{ .Repository }}:{{ .Version.Major }}.{{ .Version.Minor }}.{{ .Version.Patch }}-{{ .Version.Prerelease }}
    else
      echo "Release {{ .Version.Major }}.{{ .Version.Minor }}.{{ .Version.Patch }}"
      docker tag {{ .Docker.Image }} {{ .Repository }}:{{ .Version.Major }}.{{ .Version.Minor }}.{{ .Version.Patch }}
      docker push {{ .Repository }}:{{ .Version.Major }}.{{ .Version.Minor }}.{{ .Version.Patch }}
      docker tag {{ .Docker.Image }} {{ .Repository }}:latest
      docker push {{ .Repository }}:latest
    fi

pipeline:
  stages:
    - test
    - lint
    - build

stages:
  test:
    artifacts:
      - coverage.txt
    tasks:
      - build
      - test
  lint:
    tasks:
      - build
      - lint
  build:
    tasks:
      - build
      - image

tasks:
  build:
    template: |
      FROM golang:1.8.3 as build
      WORKDIR $GOPATH/src/github.com/{{ .Repository }}
      COPY ./ ./
      {{ if and .Git.IsClean .Git.IsTag }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o /conform -ldflags "-X \"github.com/{{ .Repository }}/conform/version.Tag={{ trimAll "v" .Git.Tag }}\" -X \"github.com/{{ .Repository }}/conform/version.SHA={{ .Git.SHA }}\" -X \"github.com/{{ .Repository }}/conform/version.Built={{ .Built }}\""
      {{ else if .Git.IsClean }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o /conform -ldflags "-X \"github.com/{{ .Repository }}/conform/version.SHA={{ .Git.SHA }}\" -X \"github.com/{{ .Repository }}/conform/version.Built={{ .Built }}\""
      {{ else }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o /conform
      {{ end }}
  test:
    template: |
      FROM golang:1.8.3 as test
      WORKDIR $GOPATH/src/github.com/{{ .Repository }}
      COPY --from=build $GOPATH/src/github.com/{{ .Repository }} .
      RUN chmod +x ./scripts/test.sh; sync; ./scripts/test.sh
  lint:
    template: |
      FROM golang:1.8.3 as lint
      WORKDIR $GOPATH/src/github.com/{{ .Repository }}
      RUN go get -u github.com/alecthomas/gometalinter
      RUN gometalinter --install
      COPY --from=build $GOPATH/src/github.com/{{ .Repository }} .
      RUN chmod +x ./scripts/lint.sh; sync; ./scripts/lint.sh
  image:
    template: |
      FROM alpine:3.6 as image
      MAINTAINER Andrew Rynhard <andrew.rynhard@autonomy.io>
      RUN apk --update add bash \
          && rm -rf /var/cache/apk/*
      COPY --from=build /conform /bin
      ENTRYPOINT ["conform"]
